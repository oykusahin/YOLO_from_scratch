# -*- coding: utf-8 -*-
"""YOLO_on_my_own.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11cHOYNnrkJFQCyN_vPexQiinxYuNCtYL
"""

! pip install tensorflow-gpu==2.0.0
! pip install --upgrade keras
! pip install opencv-python
! pip install pillow Cython lxml jupyter matplotlib
! pip install -q tensorflow tensorflow-datasets matplotlib

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import matplotlib.pyplot as plt
import numpy as np
import tensorflow.compat.v2 as tf

import tensorflow_datasets as tfds
tfds.disable_progress_bar()

from numpy import expand_dims
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array

import struct
import numpy as np
from keras.layers import Conv2D
from keras.layers import Input
from keras.layers import BatchNormalization
from keras.layers import LeakyReLU
from keras.layers import ZeroPadding2D
from keras.layers import UpSampling2D
from keras.layers.merge import add, concatenate
from keras.models import Model
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten

import numpy as np
from numpy import expand_dims
from keras.models import load_model
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from matplotlib import pyplot
from matplotlib.patches import Rectangle

#tf.enable_v2_behavior()
#print(voc_train.reduce)
#voc = tfds.load('voc:4.0.0')

voc_train = tfds.load(name='voc', split='train')
assert isinstance(voc_train, tf.data.Dataset)

y_train = { }
X_train = []
count=1

for voc_example in voc_train.take(50):
  image, label, objects = voc_example['image'], voc_example['labels'], voc_example['objects']
  
  image =tf.image.resize_with_crop_or_pad(image, 448, 448)
  image = image.numpy()
  image = np.asarray( image ) / 255.0
  
  label = label.numpy()

  bbox = objects['bbox']
  bbox = bbox.numpy()  

  if label.shape[0] == 1:
    X_train=np.append( X_train , image)
    y_train[count] = { "array" : [bbox[0,1], bbox[0,2], bbox[0,3], bbox[0,0]],
                       "labels": label
                     }
    count+=1

len(y_train)

n_samples = len(y_train)
print(n_samples)
Y_train = []
for i in range(n_samples):
  Y_train = np.append( Y_train , y_train[i+1]["array"])
  #Y_train = np.append(Y_train, y_train[i+1]["labels"].astype("int"))

X_train= X_train.reshape((n_samples, 448, 448, 3))
Y_train= Y_train.reshape((1,1,n_samples,4))
Y_train = Y_train.astype("float32")
print(Y_train.shape)
print(Y_train)

X_train.shape

Y_train.shape

classes= {}
voc_builder = tfds.builder("voc")
info = voc_builder.info

for i in range(len(info.features["labels"].names)):
  classes[i] = info.features["labels"].names[i]

classes

##TODO: skip layers, residual blocks
def createModel():
    model = Sequential()

    model.add(Conv2D(32, kernel_size=3, strides=(1,1), activation="relu"))
    model.add(Conv2D(32, kernel_size=3, strides=(2,2), activation="relu"))
        
    model.add(Conv2D(32, kernel_size=1, strides=(1,1), activation="relu"))
    model.add(Conv2D(64, kernel_size=3, strides=(1,1), activation="relu"))
    
    model.add(Conv2D(128, kernel_size=3, strides=(2,2), activation="relu"))
    
    for _ in range(2):
      model.add(Conv2D(64, kernel_size=3,  strides=(1,1), activation="relu"))
      model.add(Conv2D(128, kernel_size=3, strides=(1,1),activation="relu"))
    
    model.add(Conv2D(256, kernel_size=3, strides=(2,2), activation="relu"))
    for _ in range(8):
      model.add(Conv2D(128, kernel_size=3, strides=(1,1), activation="relu"))
      model.add(Conv2D(256, kernel_size=3, strides=(1,1), activation="relu"))
    
    model.add(Conv2D(512, kernel_size=3, strides=(2,2), activation="relu"))
    for _ in range(8):
      model.add(Conv2D(256, kernel_size=3, strides=(1,1), activation="relu"))
      model.add(Conv2D(512, kernel_size=3, strides=(1,1), activation="relu"))
    
    model.add(Conv2D(1024, kernel_size=3, strides=(2,2), activation="relu"))
    for _ in range(4):
      model.add(Conv2D(512, kernel_size=3, activation="relu"))
      model.add(Conv2D(1024, kernel_size=3, activation="relu"))

    model.add(Flatten())
    model.add(Dense(5, activation="softmax"))
        
    return model

#X_train /= 255
#Y_train /= 255

model1 = createModel()
batch_size = 256
epochs = 50
model1.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

history = model1.fit(X_train, Y_train)
model1.evaluate(test_data, test_labels_one_hot)
model1.summary()

X_train.shape

dropout_rate = 0.5
alpha = 0.2

def calculate_iou( target_boxes , pred_boxes ):
    xA = K.maximum( target_boxes[ ... , 0], pred_boxes[ ... , 0] )
    yA = K.maximum( target_boxes[ ... , 1], pred_boxes[ ... , 1] )
    xB = K.minimum( target_boxes[ ... , 2], pred_boxes[ ... , 2] )
    yB = K.minimum( target_boxes[ ... , 3], pred_boxes[ ... , 3] )
    interArea = K.maximum( 0.0 , xB - xA ) * K.maximum( 0.0 , yB - yA )
    boxAArea = (target_boxes[ ... , 2] - target_boxes[ ... , 0]) * (target_boxes[ ... , 3] - target_boxes[ ... , 1])
    boxBArea = (pred_boxes[ ... , 2] - pred_boxes[ ... , 0]) * (pred_boxes[ ... , 3] - pred_boxes[ ... , 1])
    iou = interArea / ( boxAArea + boxBArea - interArea )
    return iou

def custom_loss( y_true , y_pred ):
    mse = tf.losses.mean_squared_error( y_true , y_pred ) 
    iou = calculate_iou( y_true , y_pred ) 
    return mse + ( 1 - iou )

def iou_metric( y_true , y_pred ):
    return calculate_iou( y_true , y_pred )
		
class BoundBox:
	def __init__(self, xmin, ymin, xmax, ymax, objness = None, classes = None):
		self.xmin = xmin
		self.ymin = ymin
		self.xmax = xmax
		self.ymax = ymax
		self.objness = objness
		self.classes = classes
		self.label = -1
		self.score = -1
 
	def get_label(self):
		if self.label == -1:
			self.label = np.argmax(self.classes)
 
		return self.label
 
	def get_score(self):
		if self.score == -1:
			self.score = self.classes[self.get_label()]
 
		return self.score
 
def _sigmoid(x):
	return 1. / (1. + np.exp(-x))
 
def decode_netout(netout, anchors, obj_thresh, net_h, net_w):
	grid_h, grid_w = netout.shape[:2]
	nb_box = 3
	netout = netout.reshape((grid_h, grid_w, nb_box, -1))
	nb_class = netout.shape[-1] - 5
	boxes = []
	netout[..., :2]  = _sigmoid(netout[..., :2])
	netout[..., 4:]  = _sigmoid(netout[..., 4:])
	netout[..., 5:]  = netout[..., 4][..., np.newaxis] * netout[..., 5:]
	netout[..., 5:] *= netout[..., 5:] > obj_thresh
 
	for i in range(grid_h*grid_w):
		row = i / grid_w
		col = i % grid_w
		for b in range(nb_box):
			# 4th element is objectness score
			objectness = netout[int(row)][int(col)][b][4]
			if(objectness.all() <= obj_thresh): continue
			# first 4 elements are x, y, w, and h
			x, y, w, h = netout[int(row)][int(col)][b][:4]
			x = (col + x) / grid_w # center position, unit: image width
			y = (row + y) / grid_h # center position, unit: image height
			w = anchors[2 * b + 0] * np.exp(w) / net_w # unit: image width
			h = anchors[2 * b + 1] * np.exp(h) / net_h # unit: image height
			# last elements are class probabilities
			classes = netout[int(row)][col][b][5:]
			box = BoundBox(x-w/2, y-h/2, x+w/2, y+h/2, objectness, classes)
			boxes.append(box)
	return boxes
 
def correct_yolo_boxes(boxes, image_h, image_w, net_h, net_w):
	new_w, new_h = net_w, net_h
	for i in range(len(boxes)):
		x_offset, x_scale = (net_w - new_w)/2./net_w, float(new_w)/net_w
		y_offset, y_scale = (net_h - new_h)/2./net_h, float(new_h)/net_h
		boxes[i].xmin = int((boxes[i].xmin - x_offset) / x_scale * image_w)
		boxes[i].xmax = int((boxes[i].xmax - x_offset) / x_scale * image_w)
		boxes[i].ymin = int((boxes[i].ymin - y_offset) / y_scale * image_h)
		boxes[i].ymax = int((boxes[i].ymax - y_offset) / y_scale * image_h)
 
def _interval_overlap(interval_a, interval_b):
	x1, x2 = interval_a
	x3, x4 = interval_b
	if x3 < x1:
		if x4 < x1:
			return 0
		else:
			return min(x2,x4) - x1
	else:
		if x2 < x3:
			 return 0
		else:
			return min(x2,x4) - x3
 
def bbox_iou(box1, box2):
	intersect_w = _interval_overlap([box1.xmin, box1.xmax], [box2.xmin, box2.xmax])
	intersect_h = _interval_overlap([box1.ymin, box1.ymax], [box2.ymin, box2.ymax])
	intersect = intersect_w * intersect_h
	w1, h1 = box1.xmax-box1.xmin, box1.ymax-box1.ymin
	w2, h2 = box2.xmax-box2.xmin, box2.ymax-box2.ymin
	union = w1*h1 + w2*h2 - intersect
	return float(intersect) / union
 
def do_nms(boxes, nms_thresh):
	if len(boxes) > 0:
		nb_class = len(boxes[0].classes)
	else:
		return
	for c in range(nb_class):
		sorted_indices = np.argsort([-box.classes[c] for box in boxes])
		for i in range(len(sorted_indices)):
			index_i = sorted_indices[i]
			if boxes[index_i].classes[c] == 0: continue
			for j in range(i+1, len(sorted_indices)):
				index_j = sorted_indices[j]
				if bbox_iou(boxes[index_i], boxes[index_j]) >= nms_thresh:
					boxes[index_j].classes[c] = 0
 
def load_image_pixels(filename, shape):
	image = load_img(filename)
	width, height = image.size
	image = load_img(filename, target_size=shape)
	image = img_to_array(image)
	image = image.astype('float32')
	image /= 255.0
	image = expand_dims(image, 0)
	return image, width, height
 
def get_boxes(boxes, labels, thresh):
	v_boxes, v_labels, v_scores = list(), list(), list()
	for box in boxes:
		for i in range(len(labels)):
			if box.classes[i] > thresh:
				v_boxes.append(box)
				v_labels.append(labels[i])
				v_scores.append(box.classes[i]*100)
	return v_boxes, v_labels, v_scores

def draw_boxes(filename, v_boxes, v_labels, v_scores):
	data = pyplot.imread(filename)
	pyplot.imshow(data)
	ax = pyplot.gca()
	for i in range(len(v_boxes)):
		box = v_boxes[i]
		y1, x1, y2, x2 = box.ymin, box.xmin, box.ymax, box.xmax
		width, height = x2 - x1, y2 - y1
		rect = Rectangle((x1, y1), width, height, fill=False, color='white')
		ax.add_patch(rect)
		label = "%s (%.3f)" % (v_labels[i], v_scores[i])
		pyplot.text(x1, y1, label, color='white')
	pyplot.show()
